@page "/books"

@using global::Bookstore.Shared.Models
@using global::Bookstore.Web.Interfaces

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject IBookService BookService
@inject NavigationManager NavigationManager

<h1>Book List</h1>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (!books.Any())
{
    <p><strong>No books available.</strong></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Price</th>
                <th>Genre</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td>@book.Price.ToString("C")</td>
                    <td>@book.Genre</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditBook(book.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteBook(book.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> books = new();
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // For StreamRendering: Ensure incremental rendering
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            books = (await BookService.GetAllBooksAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading books: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditBook(Guid bookId)
    {
        NavigationManager.NavigateTo($"/edit-book/{bookId}");
    }

    private async Task DeleteBook(Guid bookId)
    {
        try
        {
            await BookService.DeleteBookAsync(bookId);
            await LoadBooksAsync(); // Refresh the cache
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting book: {ex.Message}";
        }
    }
}

