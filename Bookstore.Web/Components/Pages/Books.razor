@page "/books"

@inject IDialogService DialogService
@inject IUnitOfWork UnitOfWork
<MudContainer>
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Books</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddBook">Add Book</MudButton>
    <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
        Open Simple Dialog
    </MudButton>
    <MudTable Items="@books" Elevation="1">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Author</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Title</MudTd>
            <MudTd>@context.Author</MudTd>
            <MudTd>@context.Price.ToString("C")</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => EditBook(context))">Edit</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => DeleteBook(context))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<Book> books = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        books = (await UnitOfWork.Books.GetAllAsync()).ToList();
    }

    private async Task AddBook()
    {
        Console.WriteLine("AddBook clicked");
        var parameters = new DialogParameters { ["Book"] = new Book() };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<BookDialog>("Add Book", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Book newBook)
        {
            Console.WriteLine("Dialog result received");
            var createdBook = await UnitOfWork.Books.CreateAsync(newBook);
            books.Add(createdBook);
        }
    }

    private async Task EditBook(Book book)
    {
        var parameters = new DialogParameters { ["Book"] = book };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<BookDialog>("Add Book", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Book updatedBook)
        {
            await UnitOfWork.Books.UpdateAsync(updatedBook);
            var index = books.IndexOf(book);
            if (index >= 0) books[index] = updatedBook;
        }
    }

    private async Task DeleteBook(Book book)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Book",
            $"Are you sure you want to delete \"{book.Title}\"?",
            yesText: "Yes", cancelText: "No");

        if (confirmed == true)
        {
            await UnitOfWork.Books.DeleteAsync(book.Id);
            books.Remove(book);
        }
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<BookDialog>("Simple Dialog", options);
    }
}
