@page "/add-book"
@using global::Bookstore.Shared.Models
@using global::Bookstore.Web.Interfaces
@inject IBookService BookService
@inject NavigationManager NavigationManager

<h1>Add a New Book</h1>
<EditForm Model="newBook" OnValidSubmit="HandleValidSubmit" FormName="add-book">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" @bind-Value="newBook.Title" class="form-control" />
        <ValidationMessage For="@(() => newBook.Title)" />
    </div>
    <div class="mb-3">
        <label for="author" class="form-label">Author</label>
        <InputText id="author" @bind-Value="newBook.Author" class="form-control" />
        <ValidationMessage For="@(() => newBook.Author)" />
    </div>
    <div class="mb-3">
        <label for="isbn" class="form-label">ISBN</label>
        <InputText id="isbn" @bind-Value="newBook.ISBN" class="form-control" />
        <ValidationMessage For="@(() => newBook.ISBN)" />
    </div>
    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" @bind-Value="newBook.Price" class="form-control" />
        <ValidationMessage For="@(() => newBook.Price)" />
    </div>
    <div class="mb-3">
        <label for="genre" class="form-label">Genre</label>
        <InputText id="genre" @bind-Value="newBook.Genre" class="form-control" />
        <ValidationMessage For="@(() => newBook.Genre)" />
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Add Book</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">@successMessage</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [SupplyParameterFromForm]
    private Book newBook { get; set; }
    private string successMessage;
    private string errorMessage;
    protected override void OnInitialized() => newBook ??= new();
    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Title: {newBook.Title}, Author: {newBook.Author}, ISBN: {newBook.ISBN}, Price: {newBook.Price}, Genre: {newBook.Genre}");

        try
        {
            successMessage = null;
            errorMessage = null;

            var createdBook = await BookService.CreateBookAsync(newBook);
            successMessage = $"Book '{createdBook.Title}' was successfully created!";
            newBook = new Book(); // Reset the form
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating the book: {ex.Message}";
            Console.Error.WriteLine($"Error: {ex}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/book-list");
    }
}
